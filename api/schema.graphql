scalar Date

"Issue status type options"
enum StatusType {
    New
    Assigned
    Fixed
    Closed
}

type Issue {
    _id: ID!
    id: Int!
    title: String!
    status: StatusType!
    owner: String
    effort: Int
    created: Date!
    due: Date
    description: String
}

input IssueInputs {
    title: String!
    "Optional, defaults to 'New'"
    status: StatusType = New
    owner: String
    effort: Int
    due: Date
    description: String
}

enum ProductCategory {
    fruit
    vegetable
    other
}

type Product {
    _id: ID!
    sku: Int!
    title: String!
    description: String
    category: ProductCategory!
    picture: Boolean!
    price: Float!
    cost: Float
    inventory: Int!
    created: Date!
}

input ProductInputs {
    "Optional, generated automatically if none given"
    sku: Int
    title: String!
    description: String
    "Defaults to 'other'"
    category: ProductCategory = other
    "Optional, defaults to false"
    Picture: Boolean
    Price: Float!
    "Optional, for management use only"
    Cost: Float
    Inventory: Int!
}

# Top level declarations

type Query {
    about: String!
    issueList(status: StatusType): [Issue!]!
    issue(id: Int!): Issue!
    productList(category: ProductCategory): [Product!]!
    product(sku: Int!): Product!
}

type Mutation {
    setAboutMessage(message: String!): String
    issueAdd(issue: IssueInputs!): Issue!
    productAdd(product: ProductInputs!): Product!
}